/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// VerifyDockerImageReplyErrCode - UNKNOWN: Default value  - AUTH_ACCESS_DENIED: The registry denied access to an authenticated request  - ANON_ACCESS_DENIED: The registry denied access to an anonymous request  - AUTH_NOT_FOUND: The image has not been found after an authenticated request  - ANON_NOT_FOUND: The image has not been found after an anonymous request  - REGISTRY_ERROR: The registry returned an error  - TIMEOUT: The request to the registry timed out  - DNS: There was an error trying to resolve the name of the registry  - MALFORMED: The provided image name is malformed  - INVALID_OS: The operating system is not supported  - INVALID_ARCH: The architecture is not supported
type VerifyDockerImageReplyErrCode string

// List of VerifyDockerImageReply.ErrCode
const (
	VERIFYDOCKERIMAGEREPLYERRCODE_UNKNOWN VerifyDockerImageReplyErrCode = "UNKNOWN"
	VERIFYDOCKERIMAGEREPLYERRCODE_AUTH_ACCESS_DENIED VerifyDockerImageReplyErrCode = "AUTH_ACCESS_DENIED"
	VERIFYDOCKERIMAGEREPLYERRCODE_ANON_ACCESS_DENIED VerifyDockerImageReplyErrCode = "ANON_ACCESS_DENIED"
	VERIFYDOCKERIMAGEREPLYERRCODE_AUTH_NOT_FOUND VerifyDockerImageReplyErrCode = "AUTH_NOT_FOUND"
	VERIFYDOCKERIMAGEREPLYERRCODE_ANON_NOT_FOUND VerifyDockerImageReplyErrCode = "ANON_NOT_FOUND"
	VERIFYDOCKERIMAGEREPLYERRCODE_REGISTRY_ERROR VerifyDockerImageReplyErrCode = "REGISTRY_ERROR"
	VERIFYDOCKERIMAGEREPLYERRCODE_TIMEOUT VerifyDockerImageReplyErrCode = "TIMEOUT"
	VERIFYDOCKERIMAGEREPLYERRCODE_DNS VerifyDockerImageReplyErrCode = "DNS"
	VERIFYDOCKERIMAGEREPLYERRCODE_MALFORMED VerifyDockerImageReplyErrCode = "MALFORMED"
	VERIFYDOCKERIMAGEREPLYERRCODE_INVALID_OS VerifyDockerImageReplyErrCode = "INVALID_OS"
	VERIFYDOCKERIMAGEREPLYERRCODE_INVALID_ARCH VerifyDockerImageReplyErrCode = "INVALID_ARCH"
)

// All allowed values of VerifyDockerImageReplyErrCode enum
var AllowedVerifyDockerImageReplyErrCodeEnumValues = []VerifyDockerImageReplyErrCode{
	"UNKNOWN",
	"AUTH_ACCESS_DENIED",
	"ANON_ACCESS_DENIED",
	"AUTH_NOT_FOUND",
	"ANON_NOT_FOUND",
	"REGISTRY_ERROR",
	"TIMEOUT",
	"DNS",
	"MALFORMED",
	"INVALID_OS",
	"INVALID_ARCH",
}

func (v *VerifyDockerImageReplyErrCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VerifyDockerImageReplyErrCode(value)
	for _, existing := range AllowedVerifyDockerImageReplyErrCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VerifyDockerImageReplyErrCode", value)
}

// NewVerifyDockerImageReplyErrCodeFromValue returns a pointer to a valid VerifyDockerImageReplyErrCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVerifyDockerImageReplyErrCodeFromValue(v string) (*VerifyDockerImageReplyErrCode, error) {
	ev := VerifyDockerImageReplyErrCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VerifyDockerImageReplyErrCode: valid values are %v", v, AllowedVerifyDockerImageReplyErrCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VerifyDockerImageReplyErrCode) IsValid() bool {
	for _, existing := range AllowedVerifyDockerImageReplyErrCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VerifyDockerImageReply.ErrCode value
func (v VerifyDockerImageReplyErrCode) Ptr() *VerifyDockerImageReplyErrCode {
	return &v
}

type NullableVerifyDockerImageReplyErrCode struct {
	value *VerifyDockerImageReplyErrCode
	isSet bool
}

func (v NullableVerifyDockerImageReplyErrCode) Get() *VerifyDockerImageReplyErrCode {
	return v.value
}

func (v *NullableVerifyDockerImageReplyErrCode) Set(val *VerifyDockerImageReplyErrCode) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyDockerImageReplyErrCode) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyDockerImageReplyErrCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyDockerImageReplyErrCode(val *VerifyDockerImageReplyErrCode) *NullableVerifyDockerImageReplyErrCode {
	return &NullableVerifyDockerImageReplyErrCode{value: val, isSet: true}
}

func (v NullableVerifyDockerImageReplyErrCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyDockerImageReplyErrCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

