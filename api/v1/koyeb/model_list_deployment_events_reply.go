/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// ListDeploymentEventsReply struct for ListDeploymentEventsReply
type ListDeploymentEventsReply struct {
	Events []DeploymentEvent `json:"events,omitempty"`
	Limit *int64 `json:"limit,omitempty"`
	Offset *int64 `json:"offset,omitempty"`
	Order *string `json:"order,omitempty"`
	HasNext *bool `json:"has_next,omitempty"`
}

// NewListDeploymentEventsReply instantiates a new ListDeploymentEventsReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListDeploymentEventsReply() *ListDeploymentEventsReply {
	this := ListDeploymentEventsReply{}
	return &this
}

// NewListDeploymentEventsReplyWithDefaults instantiates a new ListDeploymentEventsReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListDeploymentEventsReplyWithDefaults() *ListDeploymentEventsReply {
	this := ListDeploymentEventsReply{}
	return &this
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *ListDeploymentEventsReply) GetEvents() []DeploymentEvent {
	if o == nil || isNil(o.Events) {
		var ret []DeploymentEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListDeploymentEventsReply) GetEventsOk() ([]DeploymentEvent, bool) {
	if o == nil || isNil(o.Events) {
    return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *ListDeploymentEventsReply) HasEvents() bool {
	if o != nil && !isNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []DeploymentEvent and assigns it to the Events field.
func (o *ListDeploymentEventsReply) SetEvents(v []DeploymentEvent) {
	o.Events = v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ListDeploymentEventsReply) GetLimit() int64 {
	if o == nil || isNil(o.Limit) {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListDeploymentEventsReply) GetLimitOk() (*int64, bool) {
	if o == nil || isNil(o.Limit) {
    return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ListDeploymentEventsReply) HasLimit() bool {
	if o != nil && !isNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *ListDeploymentEventsReply) SetLimit(v int64) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ListDeploymentEventsReply) GetOffset() int64 {
	if o == nil || isNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListDeploymentEventsReply) GetOffsetOk() (*int64, bool) {
	if o == nil || isNil(o.Offset) {
    return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ListDeploymentEventsReply) HasOffset() bool {
	if o != nil && !isNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *ListDeploymentEventsReply) SetOffset(v int64) {
	o.Offset = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *ListDeploymentEventsReply) GetOrder() string {
	if o == nil || isNil(o.Order) {
		var ret string
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListDeploymentEventsReply) GetOrderOk() (*string, bool) {
	if o == nil || isNil(o.Order) {
    return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *ListDeploymentEventsReply) HasOrder() bool {
	if o != nil && !isNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given string and assigns it to the Order field.
func (o *ListDeploymentEventsReply) SetOrder(v string) {
	o.Order = &v
}

// GetHasNext returns the HasNext field value if set, zero value otherwise.
func (o *ListDeploymentEventsReply) GetHasNext() bool {
	if o == nil || isNil(o.HasNext) {
		var ret bool
		return ret
	}
	return *o.HasNext
}

// GetHasNextOk returns a tuple with the HasNext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListDeploymentEventsReply) GetHasNextOk() (*bool, bool) {
	if o == nil || isNil(o.HasNext) {
    return nil, false
	}
	return o.HasNext, true
}

// HasHasNext returns a boolean if a field has been set.
func (o *ListDeploymentEventsReply) HasHasNext() bool {
	if o != nil && !isNil(o.HasNext) {
		return true
	}

	return false
}

// SetHasNext gets a reference to the given bool and assigns it to the HasNext field.
func (o *ListDeploymentEventsReply) SetHasNext(v bool) {
	o.HasNext = &v
}

func (o ListDeploymentEventsReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !isNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !isNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !isNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !isNil(o.HasNext) {
		toSerialize["has_next"] = o.HasNext
	}
	return json.Marshal(toSerialize)
}

type NullableListDeploymentEventsReply struct {
	value *ListDeploymentEventsReply
	isSet bool
}

func (v NullableListDeploymentEventsReply) Get() *ListDeploymentEventsReply {
	return v.value
}

func (v *NullableListDeploymentEventsReply) Set(val *ListDeploymentEventsReply) {
	v.value = val
	v.isSet = true
}

func (v NullableListDeploymentEventsReply) IsSet() bool {
	return v.isSet
}

func (v *NullableListDeploymentEventsReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDeploymentEventsReply(val *ListDeploymentEventsReply) *NullableListDeploymentEventsReply {
	return &NullableListDeploymentEventsReply{value: val, isSet: true}
}

func (v NullableListDeploymentEventsReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDeploymentEventsReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


