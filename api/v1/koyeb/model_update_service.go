/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// UpdateService struct for UpdateService
type UpdateService struct {
	Definition *DeploymentDefinition `json:"definition,omitempty"`
	Metadata *DeploymentMetadata `json:"metadata,omitempty"`
	// If set to true, the build stage will be skipped and the image coming from the last successful build step will be used instead. The call fails if no previous successful builds happened.
	SkipBuild *bool `json:"skip_build,omitempty"`
	SaveOnly *bool `json:"save_only,omitempty"`
}

// NewUpdateService instantiates a new UpdateService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateService() *UpdateService {
	this := UpdateService{}
	return &this
}

// NewUpdateServiceWithDefaults instantiates a new UpdateService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateServiceWithDefaults() *UpdateService {
	this := UpdateService{}
	return &this
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *UpdateService) GetDefinition() DeploymentDefinition {
	if o == nil || isNil(o.Definition) {
		var ret DeploymentDefinition
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateService) GetDefinitionOk() (*DeploymentDefinition, bool) {
	if o == nil || isNil(o.Definition) {
    return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *UpdateService) HasDefinition() bool {
	if o != nil && !isNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given DeploymentDefinition and assigns it to the Definition field.
func (o *UpdateService) SetDefinition(v DeploymentDefinition) {
	o.Definition = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *UpdateService) GetMetadata() DeploymentMetadata {
	if o == nil || isNil(o.Metadata) {
		var ret DeploymentMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateService) GetMetadataOk() (*DeploymentMetadata, bool) {
	if o == nil || isNil(o.Metadata) {
    return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *UpdateService) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given DeploymentMetadata and assigns it to the Metadata field.
func (o *UpdateService) SetMetadata(v DeploymentMetadata) {
	o.Metadata = &v
}

// GetSkipBuild returns the SkipBuild field value if set, zero value otherwise.
func (o *UpdateService) GetSkipBuild() bool {
	if o == nil || isNil(o.SkipBuild) {
		var ret bool
		return ret
	}
	return *o.SkipBuild
}

// GetSkipBuildOk returns a tuple with the SkipBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateService) GetSkipBuildOk() (*bool, bool) {
	if o == nil || isNil(o.SkipBuild) {
    return nil, false
	}
	return o.SkipBuild, true
}

// HasSkipBuild returns a boolean if a field has been set.
func (o *UpdateService) HasSkipBuild() bool {
	if o != nil && !isNil(o.SkipBuild) {
		return true
	}

	return false
}

// SetSkipBuild gets a reference to the given bool and assigns it to the SkipBuild field.
func (o *UpdateService) SetSkipBuild(v bool) {
	o.SkipBuild = &v
}

// GetSaveOnly returns the SaveOnly field value if set, zero value otherwise.
func (o *UpdateService) GetSaveOnly() bool {
	if o == nil || isNil(o.SaveOnly) {
		var ret bool
		return ret
	}
	return *o.SaveOnly
}

// GetSaveOnlyOk returns a tuple with the SaveOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateService) GetSaveOnlyOk() (*bool, bool) {
	if o == nil || isNil(o.SaveOnly) {
    return nil, false
	}
	return o.SaveOnly, true
}

// HasSaveOnly returns a boolean if a field has been set.
func (o *UpdateService) HasSaveOnly() bool {
	if o != nil && !isNil(o.SaveOnly) {
		return true
	}

	return false
}

// SetSaveOnly gets a reference to the given bool and assigns it to the SaveOnly field.
func (o *UpdateService) SetSaveOnly(v bool) {
	o.SaveOnly = &v
}

func (o UpdateService) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !isNil(o.SkipBuild) {
		toSerialize["skip_build"] = o.SkipBuild
	}
	if !isNil(o.SaveOnly) {
		toSerialize["save_only"] = o.SaveOnly
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateService struct {
	value *UpdateService
	isSet bool
}

func (v NullableUpdateService) Get() *UpdateService {
	return v.value
}

func (v *NullableUpdateService) Set(val *UpdateService) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateService) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateService(val *UpdateService) *NullableUpdateService {
	return &NullableUpdateService{value: val, isSet: true}
}

func (v NullableUpdateService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


