/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
)

// VerifyDockerImageReply struct for VerifyDockerImageReply
type VerifyDockerImageReply struct {
	Success *bool `json:"success,omitempty"`
	Reason *string `json:"reason,omitempty"`
	Code *VerifyDockerImageReplyErrCode `json:"code,omitempty"`
}

// NewVerifyDockerImageReply instantiates a new VerifyDockerImageReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyDockerImageReply() *VerifyDockerImageReply {
	this := VerifyDockerImageReply{}
	var code VerifyDockerImageReplyErrCode = VERIFYDOCKERIMAGEREPLYERRCODE_UNKNOWN
	this.Code = &code
	return &this
}

// NewVerifyDockerImageReplyWithDefaults instantiates a new VerifyDockerImageReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyDockerImageReplyWithDefaults() *VerifyDockerImageReply {
	this := VerifyDockerImageReply{}
	var code VerifyDockerImageReplyErrCode = VERIFYDOCKERIMAGEREPLYERRCODE_UNKNOWN
	this.Code = &code
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *VerifyDockerImageReply) GetSuccess() bool {
	if o == nil || isNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyDockerImageReply) GetSuccessOk() (*bool, bool) {
	if o == nil || isNil(o.Success) {
    return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *VerifyDockerImageReply) HasSuccess() bool {
	if o != nil && !isNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *VerifyDockerImageReply) SetSuccess(v bool) {
	o.Success = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *VerifyDockerImageReply) GetReason() string {
	if o == nil || isNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyDockerImageReply) GetReasonOk() (*string, bool) {
	if o == nil || isNil(o.Reason) {
    return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *VerifyDockerImageReply) HasReason() bool {
	if o != nil && !isNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *VerifyDockerImageReply) SetReason(v string) {
	o.Reason = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *VerifyDockerImageReply) GetCode() VerifyDockerImageReplyErrCode {
	if o == nil || isNil(o.Code) {
		var ret VerifyDockerImageReplyErrCode
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyDockerImageReply) GetCodeOk() (*VerifyDockerImageReplyErrCode, bool) {
	if o == nil || isNil(o.Code) {
    return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *VerifyDockerImageReply) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given VerifyDockerImageReplyErrCode and assigns it to the Code field.
func (o *VerifyDockerImageReply) SetCode(v VerifyDockerImageReplyErrCode) {
	o.Code = &v
}

func (o VerifyDockerImageReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !isNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !isNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return json.Marshal(toSerialize)
}

type NullableVerifyDockerImageReply struct {
	value *VerifyDockerImageReply
	isSet bool
}

func (v NullableVerifyDockerImageReply) Get() *VerifyDockerImageReply {
	return v.value
}

func (v *NullableVerifyDockerImageReply) Set(val *VerifyDockerImageReply) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyDockerImageReply) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyDockerImageReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyDockerImageReply(val *VerifyDockerImageReply) *NullableVerifyDockerImageReply {
	return &NullableVerifyDockerImageReply{value: val, isSet: true}
}

func (v NullableVerifyDockerImageReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyDockerImageReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


