/*
Koyeb Rest API

The Koyeb API allows you to interact with the Koyeb platform in a simple, programmatic way using conventional HTTP requests. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package koyeb

import (
	"encoding/json"
	"fmt"
)

// TriggerGitDeploymentMetadataProvider the model 'TriggerGitDeploymentMetadataProvider'
type TriggerGitDeploymentMetadataProvider string

// List of TriggerGitDeploymentMetadata.Provider
const (
	TRIGGERGITDEPLOYMENTMETADATAPROVIDER_UNKNOWN TriggerGitDeploymentMetadataProvider = "UNKNOWN"
	TRIGGERGITDEPLOYMENTMETADATAPROVIDER_GITHUB TriggerGitDeploymentMetadataProvider = "GITHUB"
)

// All allowed values of TriggerGitDeploymentMetadataProvider enum
var AllowedTriggerGitDeploymentMetadataProviderEnumValues = []TriggerGitDeploymentMetadataProvider{
	"UNKNOWN",
	"GITHUB",
}

func (v *TriggerGitDeploymentMetadataProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TriggerGitDeploymentMetadataProvider(value)
	for _, existing := range AllowedTriggerGitDeploymentMetadataProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TriggerGitDeploymentMetadataProvider", value)
}

// NewTriggerGitDeploymentMetadataProviderFromValue returns a pointer to a valid TriggerGitDeploymentMetadataProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTriggerGitDeploymentMetadataProviderFromValue(v string) (*TriggerGitDeploymentMetadataProvider, error) {
	ev := TriggerGitDeploymentMetadataProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TriggerGitDeploymentMetadataProvider: valid values are %v", v, AllowedTriggerGitDeploymentMetadataProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TriggerGitDeploymentMetadataProvider) IsValid() bool {
	for _, existing := range AllowedTriggerGitDeploymentMetadataProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TriggerGitDeploymentMetadata.Provider value
func (v TriggerGitDeploymentMetadataProvider) Ptr() *TriggerGitDeploymentMetadataProvider {
	return &v
}

type NullableTriggerGitDeploymentMetadataProvider struct {
	value *TriggerGitDeploymentMetadataProvider
	isSet bool
}

func (v NullableTriggerGitDeploymentMetadataProvider) Get() *TriggerGitDeploymentMetadataProvider {
	return v.value
}

func (v *NullableTriggerGitDeploymentMetadataProvider) Set(val *TriggerGitDeploymentMetadataProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerGitDeploymentMetadataProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerGitDeploymentMetadataProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerGitDeploymentMetadataProvider(val *TriggerGitDeploymentMetadataProvider) *NullableTriggerGitDeploymentMetadataProvider {
	return &NullableTriggerGitDeploymentMetadataProvider{value: val, isSet: true}
}

func (v NullableTriggerGitDeploymentMetadataProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerGitDeploymentMetadataProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

